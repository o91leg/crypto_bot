# Техническое задание: Крипто-бот для отслеживания индикаторов

## 1. Общее описание проекта

Telegram-бот для отслеживания технических индикаторов криптовалют с уведомлениями в реальном времени. Система работает на основе WebSocket подключения к Binance API с асинхронной архитектурой на Python.

## 2. Технологический стек

- **Язык**: Python 3.11+
- **Фреймворк бота**: Aiogram 3.x
- **База данных**: PostgreSQL (для 10 пользователей оптимально)
- **Кеширование**: Redis
- **API данных**: Binance WebSocket API
- **Контейнеризация**: Docker Desktop
- **Асинхронность**: asyncio, aiohttp

## 3. Архитектура системы

### 3.1 Структура проекта (максимальная модульность)
```
crypto_bot/
├── src/
│   ├── bot/
│   │   ├── handlers/
│   │   │   ├── __init__.py
│   │   │   ├── start_handler.py              # Обработка команды /start
│   │   │   ├── menu_handler.py               # Главное меню
│   │   │   ├── add_pair_handler.py           # Добавление пары
│   │   │   ├── remove_pair_handler.py        # Удаление пары
│   │   │   ├── my_pairs_handler.py           # Мои пары
│   │   │   ├── timeframes_handler.py         # Выбор таймфреймов
│   │   │   ├── rsi_view_handler.py           # Просмотр RSI
│   │   │   ├── settings_handler.py           # Настройки
│   │   │   └── help_handler.py               # Помощь
│   │   ├── keyboards/
│   │   │   ├── __init__.py
│   │   │   ├── main_menu_kb.py               # Главное меню
│   │   │   ├── pairs_list_kb.py              # Список пар
│   │   │   ├── timeframes_kb.py              # Таймфреймы
│   │   │   ├── settings_kb.py                # Настройки
│   │   │   ├── confirmation_kb.py            # Подтверждения
│   │   │   └── back_to_menu_kb.py            # Возврат в меню
│   │   ├── middlewares/
│   │   │   ├── __init__.py
│   │   │   ├── database_mw.py                # Подключение к БД
│   │   │   ├── user_check_mw.py              # Проверка пользователя
│   │   │   └── error_handler_mw.py           # Обработка ошибок
│   │   ├── states/
│   │   │   ├── __init__.py
│   │   │   ├── pair_states.py                # Состояния добавления пар
│   │   │   └── settings_states.py            # Состояния настроек
│   │   └── __init__.py
│   ├── data/
│   │   ├── models/
│   │   │   ├── __init__.py
│   │   │   ├── user_model.py                 # Модель пользователя
│   │   │   ├── pair_model.py                 # Модель пары
│   │   │   ├── user_pair_model.py            # Связь пользователь-пара
│   │   │   ├── candle_model.py               # Модель свечи
│   │   │   ├── signal_history_model.py       # История сигналов
│   │   │   └── base_model.py                 # Базовая модель
│   │   ├── repositories/
│   │   │   ├── __init__.py
│   │   │   ├── base_repository.py            # Базовый репозиторий
│   │   │   ├── user_repository.py            # Репозиторий пользователей
│   │   │   ├── pair_repository.py            # Репозиторий пар
│   │   │   ├── user_pair_repository.py       # Репозиторий связей
│   │   │   ├── candle_repository.py          # Репозиторий свечей
│   │   │   └── signal_repository.py          # Репозиторий сигналов
│   │   ├── migrations/
│   │   │   ├── __init__.py
│   │   │   ├── create_users_table.py         # Миграция пользователей
│   │   │   ├── create_pairs_table.py         # Миграция пар
│   │   │   ├── create_candles_table.py       # Миграция свечей
│   │   │   └── create_signals_table.py       # Миграция сигналов
│   │   ├── database.py                       # Подключение к БД
│   │   └── redis_client.py                   # Подключение к Redis
│   ├── services/
│   │   ├── websocket/
│   │   │   ├── __init__.py
│   │   │   ├── binance_websocket.py          # WebSocket клиент
│   │   │   ├── stream_manager.py             # Управление потоками
│   │   │   ├── reconnection_handler.py       # Переподключение
│   │   │   └── data_processor.py             # Обработка данных
│   │   ├── indicators/
│   │   │   ├── __init__.py
│   │   │   ├── rsi_calculator.py             # Расчет RSI
│   │   │   ├── ema_calculator.py             # Расчет EMA
│   │   │   ├── volume_analyzer.py            # Анализ объема
│   │   │   ├── trend_analyzer.py             # Анализ тренда
│   │   │   └── indicator_factory.py          # Фабрика индикаторов
│   │   ├── signals/
│   │   │   ├── __init__.py
│   │   │   ├── rsi_signals.py                # RSI сигналы
│   │   │   ├── ema_signals.py                # EMA сигналы
│   │   │   ├── volume_signals.py             # Объемные сигналы
│   │   │   ├── signal_aggregator.py          # Объединение сигналов
│   │   │   └── signal_scheduler.py           # Планировщик сигналов
│   │   ├── notifications/
│   │   │   ├── __init__.py
│   │   │   ├── telegram_sender.py            # Отправка в Telegram
│   │   │   ├── message_formatter.py          # Форматирование сообщений
│   │   │   ├── notification_queue.py         # Очередь уведомлений
│   │   │   └── rate_limiter.py               # Ограничение частоты
│   │   ├── data_fetchers/
│   │   │   ├── __init__.py
│   │   │   ├── historical_fetcher.py         # Исторические данные
│   │   │   ├── pair_validator.py             # Валидация пар
│   │   │   └── market_data_fetcher.py        # Рыночные данные
│   │   ├── cache/
│   │   │   ├── __init__.py
│   │   │   ├── candle_cache.py               # Кеш свечей
│   │   │   ├── indicator_cache.py            # Кеш индикаторов
│   │   │   ├── user_cache.py                 # Кеш пользователей
│   │   │   └── cache_manager.py              # Менеджер кеша
│   │   └── __init__.py
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── constants.py                      # Константы
│   │   ├── exceptions.py                     # Кастомные исключения
│   │   ├── logger.py                         # Настройка логирования
│   │   ├── decorators.py                     # Декораторы
│   │   ├── time_helpers.py                   # Работа со временем
│   │   ├── math_helpers.py                   # Математические функции
│   │   ├── text_formatters.py                # Форматирование текста
│   │   └── validators.py                     # Валидаторы
│   ├── config/
│   │   ├── __init__.py
│   │   ├── bot_config.py                     # Конфигурация бота
│   │   ├── database_config.py                # Конфигурация БД
│   │   ├── redis_config.py                   # Конфигурация Redis
│   │   ├── binance_config.py                 # Конфигурация Binance
│   │   └── logging_config.py                 # Конфигурация логов
│   └── main.py                               # Точка входа
├── tests/
│   ├── __init__.py
│   ├── unit/
│   │   ├── test_indicators.py                # Тесты индикаторов
│   │   ├── test_repositories.py              # Тесты репозиториев
│   │   └── test_services.py                  # Тесты сервисов
│   ├── integration/
│   │   ├── test_websocket.py                 # Тесты WebSocket
│   │   └── test_notifications.py             # Тесты уведомлений
│   └── conftest.py                           # Конфигурация тестов
├── scripts/
│   ├── setup_database.py                     # Настройка БД
│   ├── migrate.py                            # Запуск миграций
│   └── seed_data.py                          # Тестовые данные
├── docker-compose.yml
├── Dockerfile
├── requirements.txt
├── .env.example
├── .gitignore
└── README.md
```

### 3.2 Компоненты системы

#### 3.2.1 Bot Layer (Telegram интерфейс)
- **handlers/**: Обработчики команд и callback'ов
- **keyboards/**: Inline клавиатуры для навигации
- **middlewares/**: Промежуточные обработчики (подключение к БД)

#### 3.2.2 Data Layer (Работа с данными)
- **models/**: SQLAlchemy модели
- **repositories/**: Паттерн Repository для работы с БД
- **database.py**: Подключение и конфигурация БД

#### 3.2.3 Services Layer (Бизнес логика)
- **binance_service.py**: WebSocket подключение и обработка данных
- **indicator_service.py**: Расчет технических индикаторов
- **signal_service.py**: Генерация сигналов
- **notification_service.py**: Отправка уведомлений

#### 3.2.4 Utils Layer (Вспомогательные функции)
- **indicators.py**: Математические функции для индикаторов
- **validators.py**: Валидация входных данных
- **formatters.py**: Форматирование сообщений

## 4. Функциональные требования

### 4.1 Пользовательский интерфейс

#### 4.1.1 Главное меню
При команде `/start` пользователь регистрируется в БД и видит меню:
- 📈 **Мои пары**
- ➕ **Добавить пару**
- ➖ **Удалить пару**
- ⚙️ **Настройки**
- ❓ **Помощь**

#### 4.1.2 Добавить пару
- Пользователь вводит тикер (например: SOL)
- Система валидирует существование пары SOL/USDT на Binance
- Скачиваются исторические данные для всех таймфреймов
- Пара добавляется в БД и Redis кеш

#### 4.1.3 Удалить пару
- Показывается список всех пар пользователя
- По кнопке удаляется пара из отслеживания
- Данные остаются в БД для возможного повторного добавления

#### 4.1.4 Мои пары
- Список всех отслеживаемых пар
- При нажатии на пару открывается меню таймфреймов:
  - 1m, 5m, 15m, 1h, 2h, 4h, 1d, 1w
  - Переключатели ВКЛ/ВЫКЛ для каждого таймфрейма
  - Кнопка **RSI** - показывает текущие значения RSI на всех таймфреймах

#### 4.1.5 Настройки
- Переключатель: **Уведомления ВКЛ/ВЫКЛ**

#### 4.1.6 Помощь
- Инструкция по использованию бота
- Описание индикаторов и сигналов

### 4.2 Система уведомлений

#### 4.2.1 Формат уведомления
```
🔴 SOL/USDT - 15m
Цена: $142.35 (+2.4%)
RSI: 23.5 (средняя перепроданность)
Объем: +150% от предыдущей свечи
EMA тренд: нисходящий
```

#### 4.2.2 Кнопка возврата
В каждом уведомлении кнопка **📱 Меню** для быстрого возврата в главное меню.

### 4.3 Индикаторы и сигналы

#### 4.3.1 RSI (Relative Strength Index)
**Зоны сигналов:**
- RSI < 20: 🔴 Сильная перепроданность
- RSI < 25: 🟠 Средняя перепроданность
- RSI < 30: 🟡 Обычная перепроданность
- RSI > 70: 🟡 Обычная перекупленность
- RSI > 75: 🟠 Средняя перекупленность
- RSI > 80: 🔴 Сильная перекупленность

**Логика уведомлений:**
- Сигнал отправляется при входе в зону
- Повторяется каждые 2 минуты пока RSI в зоне или углубляется

#### 4.3.2 EMA (Exponential Moving Average)
**Периоды**: 20, 50, 100, 200

**Сигналы:**
- Пересечение цены выше/ниже EMA200 (основной тренд)
- Пересечение быстрых EMA (20) с медленными (50, 100)
- Выстраивание всех EMA в восходящем/нисходящем порядке

#### 4.3.3 Объем торгов
- Сравнение с объемом предыдущей свечи
- Показывается только при RSI сигналах
- Формат: "+150%" или "-30%"

## 5. Технические требования

### 5.1 База данных PostgreSQL

#### 5.1.1 Таблица users
```sql
CREATE TABLE users (
    id BIGINT PRIMARY KEY,  -- telegram_user_id
    username VARCHAR(255),
    first_name VARCHAR(255),
    notifications_enabled BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

#### 5.1.2 Таблица pairs
```sql
CREATE TABLE pairs (
    id SERIAL PRIMARY KEY,
    symbol VARCHAR(20) NOT NULL UNIQUE,  -- 'SOLUSDT'
    base_asset VARCHAR(10) NOT NULL,     -- 'SOL'
    quote_asset VARCHAR(10) NOT NULL,    -- 'USDT'
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW()
);
```

#### 5.1.3 Таблица user_pairs
```sql
CREATE TABLE user_pairs (
    user_id BIGINT REFERENCES users(id),
    pair_id INTEGER REFERENCES pairs(id),
    timeframes JSONB,  -- {'1m': true, '5m': false, ...}
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (user_id, pair_id)
);
```

#### 5.1.4 Таблица candles
```sql
CREATE TABLE candles (
    id SERIAL PRIMARY KEY,
    pair_id INTEGER REFERENCES pairs(id),
    timeframe VARCHAR(5) NOT NULL,  -- '1m', '5m', etc.
    open_time BIGINT NOT NULL,
    close_time BIGINT NOT NULL,
    open_price DECIMAL(18,8) NOT NULL,
    high_price DECIMAL(18,8) NOT NULL,
    low_price DECIMAL(18,8) NOT NULL,
    close_price DECIMAL(18,8) NOT NULL,
    volume DECIMAL(18,8) NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(pair_id, timeframe, open_time)
);
```

#### 5.1.5 Таблица signals_history
```sql
CREATE TABLE signals_history (
    id SERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES users(id),
    pair_id INTEGER REFERENCES pairs(id),
    timeframe VARCHAR(5) NOT NULL,
    signal_type VARCHAR(50) NOT NULL,  -- 'rsi_oversold', 'ema_cross'
    signal_value DECIMAL(10,4),
    price DECIMAL(18,8) NOT NULL,
    sent_at TIMESTAMP DEFAULT NOW()
);
```

### 5.2 Redis кеширование

#### 5.2.1 Структуры кеша
```
candles:{symbol}:{timeframe} -> List[Candle] (последние 500 свечей)
rsi:{symbol}:{timeframe} -> float (текущее значение RSI)
ema:{symbol}:{timeframe}:{period} -> float (значение EMA)
volume_change:{symbol}:{timeframe} -> float (изменение объема %)
last_signal:{user_id}:{symbol}:{timeframe}:{signal_type} -> timestamp
```

### 5.3 WebSocket подключение к Binance

#### 5.3.1 Потоки данных
- Один WebSocket для всех пар всех пользователей
- Подписка на kline потоки для каждого таймфрейма
- Автоматическое переподключение при разрыве соединения

#### 5.3.2 Обработка данных
```python
async def handle_kline_data(data):
    # Сохранить свечу в БД и Redis
    # Рассчитать индикаторы
    # Проверить условия сигналов
    # Отправить уведомления пользователям
```

### 5.4 Система индикаторов

#### 5.4.1 RSI расчет
```python
def calculate_rsi(prices: List[float], period: int = 14) -> float:
    # Стандартный алгоритм RSI
    # Возвращает значение 0-100
```

#### 5.4.2 EMA расчет
```python
def calculate_ema(prices: List[float], period: int) -> float:
    # Экспоненциальное скользящее среднее
    # Формула: EMA = (price * 2/(period+1)) + (prev_EMA * (1 - 2/(period+1)))
```

### 5.5 Система уведомлений

#### 5.5.1 Проверка условий сигналов
```python
async def check_rsi_signals(user_id, symbol, timeframe, rsi_value):
    # Проверить зоны RSI
    # Проверить время последнего сигнала (2 минуты)
    # Отправить уведомление если нужно
```

#### 5.5.2 Форматирование сообщений
```python
def format_signal_message(symbol, timeframe, price, price_change, rsi, volume_change, ema_trend):
    # Создать красивое сообщение с эмодзи
    # Добавить inline кнопку "Меню"
```

## 6. Производительность и масштабируемость

### 6.1 Оптимизация
- Пакетная обработка свечей
- Кеширование вычислений в Redis
- Асинхронная обработка WebSocket данных
- Индексы БД на часто используемых полях

### 6.2 Мониторинг
- Логирование всех операций
- Метрики производительности
- Обработка исключений с retry механизмом

## 7. Развертывание

### 7.1 Docker Compose
```yaml
version: '3.8'
services:
  bot:
    build: .
    depends_on:
      - postgres
      - redis
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=crypto_bot
      - POSTGRES_USER=crypto_user
      - POSTGRES_PASSWORD=crypto_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
```

### 7.2 Переменные окружения
```
BOT_TOKEN=your_telegram_bot_token
DATABASE_URL=postgresql://crypto_user:crypto_pass@postgres:5432/crypto_bot
REDIS_URL=redis://redis:6379/0
BINANCE_BASE_URL=wss://stream.binance.com:9443/ws
```

## 8. Этапы разработки

### Этап 1: Инфраструктура (1-2 дня)
- Настройка Docker окружения
- Создание моделей БД
- Базовый Telegram бот

### Этап 2: Основной функционал (3-4 дня)
- WebSocket подключение к Binance
- Система добавления/удаления пар
- Базовые индикаторы (RSI, EMA)

### Этап 3: Уведомления (2-3 дня)
- Система сигналов
- Форматирование сообщений
- Пользовательские настройки

### Этап 4: Оптимизация (1-2 дня)
- Кеширование в Redis
- Обработка ошибок
- Тестирование производительности

## 9. Дефолтная конфигурация

### 9.1 При первом запуске
Каждый новый пользователь автоматически получает:
- Пару BTC/USDT в отслеживании
- Все таймфреймы включены: 1m, 5m, 15m, 1h, 2h, 4h, 1d, 1w
- Уведомления включены

### 9.2 Исторические данные
- При добавлении новой пары скачиваются последние 500 свечей для каждого таймфрейма
- Данные сохраняются в БД и кешируются в Redis
- Если данные уже есть - пропускается скачивание

## 10. Требования к модульности кода

### 10.1 Общие правила
- **Максимум 1000 строк** в каждом файле
- В начале каждого файла обязательный комментарий с путем
- Одна ответственность на класс/функцию
- Четкое разделение слоев архитектуры

### 10.2 Шаблон заголовка файла
```python
"""
Путь: src/services/indicators/rsi_calculator.py
Описание: Сервис для расчета индикатора RSI (Relative Strength Index)
Автор: Crypto Bot Team
Дата создания: 2025-07-28
"""

import asyncio
from typing import List, Optional
from decimal import Decimal

# Остальной код файла...
```

### 10.3 Принципы разбиения

#### 10.3.1 Handlers (Обработчики)
- Каждый handler отвечает за одну функцию меню
- Максимум 10-15 функций в файле
- Логика вынесена в сервисы

#### 10.3.2 Services (Сервисы)
- Разбиты по доменам (websocket, indicators, signals, notifications)
- Каждый сервис решает одну задачу
- Максимум 20-25 методов в классе

#### 10.3.3 Repositories (Репозитории)
- Один репозиторий на модель
- CRUD операции разбиты на отдельные методы
- Сложные запросы в отдельных методах

#### 10.3.4 Models (Модели)
- Одна модель на файл
- Связи вынесены в отдельные методы
- Валидация в отдельных методах

### 10.4 Пример структуры большого сервиса

**src/services/websocket/binance_websocket.py** (основной класс):
```python
"""
Путь: src/services/websocket/binance_websocket.py
Описание: Основной WebSocket клиент для Binance API
"""
class BinanceWebSocketClient:
    # Только основные методы подключения
    # ~300-400 строк
```

**src/services/websocket/stream_manager.py** (управление потоками):
```python
"""
Путь: src/services/websocket/stream_manager.py
Описание: Управление потоками данных WebSocket
"""
class StreamManager:
    # Подписка/отписка от потоков
    # ~200-300 строк
```

**src/services/websocket/data_processor.py** (обработка данных):
```python
"""
Путь: src/services/websocket/data_processor.py
Описание: Обработка входящих данных от WebSocket
"""
class DataProcessor:
    # Парсинг и валидация данных
    # ~400-500 строк
```