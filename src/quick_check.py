"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
"""
import asyncio
from sqlalchemy import text
from data.database import get_session, init_database

async def quick_check():
    await init_database()

    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á–∏
        result = await session.execute(text("SELECT COUNT(*) FROM candles"))
        candles = result.scalar()
        print(f"‚úÖ –°–≤–µ—á–µ–π –≤ –ë–î: {candles}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—ã
        result = await session.execute(text("SELECT COUNT(*) FROM pairs"))
        pairs = result.scalar()
        print(f"‚úÖ –ü–∞—Ä –≤ –ë–î: {pairs}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä—ã (—É–±–∏—Ä–∞–µ–º display_name)
        if pairs > 0:
            result = await session.execute(text("SELECT symbol FROM pairs"))
            print("\n–ü–∞—Ä—ã:")
            for row in result:
                print(f"  üìà {row.symbol}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        result = await session.execute(text("""
            SELECT timeframe, COUNT(*) as count 
            FROM candles 
            GROUP BY timeframe 
            ORDER BY count DESC
        """))

        print("\n–°–≤–µ—á–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
        for row in result:
            print(f"  ‚è∞ {row.timeframe}: {row.count} —Å–≤–µ—á–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è BTC –Ω–∞ 1m
        result = await session.execute(text("""
            SELECT COUNT(*) as count 
            FROM candles c
            JOIN pairs p ON c.pair_id = p.id 
            WHERE p.symbol = 'BTCUSDT' AND c.timeframe = '1m'
        """))

        btc_1m_count = result.scalar()
        print(f"\nüîç BTC 1m —Å–≤–µ—á–µ–π: {btc_1m_count}")

        if btc_1m_count >= 15:
            print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI —Ä–∞—Å—á–µ—Ç–∞!")
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI")

if __name__ == "__main__":
    asyncio.run(quick_check())