"""
–ü—É—Ç—å: src/bot/handlers/add_pair/add_pair_handler.py
–û–ø–∏—Å–∞–Ω–∏–µ: –û—Å–Ω–æ–≤–Ω—ã–µ FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
–ê–≤—Ç–æ—Ä: Crypto Bot Team
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-07-28
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
import structlog

from bot.keyboards.main_menu_kb import get_main_menu_keyboard, get_back_to_menu_keyboard, get_confirmation_keyboard, get_loading_keyboard
from utils.logger import log_user_action
from .add_pair_formatters import (
    create_add_pair_instruction, create_pair_confirmation_text,
    create_pair_error_text, create_pair_added_text, create_add_error_text
)
from .add_pair_logic import process_symbol_input, execute_add_pair

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = structlog.get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
add_pair_router = Router()


class AddPairStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã."""
    waiting_for_symbol = State()
    confirming_pair = State()


@add_pair_router.callback_query(F.data == "add_pair")
async def handle_add_pair_start(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.

    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
        await state.set_state(AddPairStates.waiting_for_symbol)

        instruction_text = create_add_pair_instruction()

        await callback.message.edit_text(
            instruction_text,
            reply_markup=get_back_to_menu_keyboard()
        )

        await callback.answer()
        logger.info("User started adding pair", user_id=user_id)

    except Exception as e:
        logger.error("Error starting add pair process", user_id=user_id, error=str(e))
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@add_pair_router.message(AddPairStates.waiting_for_symbol)
async def handle_pair_symbol_input(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Å–∏–º–≤–æ–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = message.from_user.id
    symbol_input = message.text.strip() if message.text else ""

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()

        if not symbol_input:
            await message.answer(
                "‚ùå <b>–ü—É—Å—Ç–æ–π –≤–≤–æ–¥</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã:",
                reply_markup=get_back_to_menu_keyboard()
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer(
            f"üîç <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É {symbol_input.upper()}...</b>\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Binance API.",
            reply_markup=get_back_to_menu_keyboard()
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª
        result = await process_symbol_input(session, symbol_input, user_id)

        if result["success"]:
            # –°–∏–º–≤–æ–ª –≤–∞–ª–∏–¥–Ω—ã–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await state.update_data(
                symbol=result["symbol"],
                base_asset=result.get("base_asset", ""),
                quote_asset=result.get("quote_asset", ""),
                display_name=result.get("display_name", ""),
                is_new_pair=result.get("is_new_pair", False)
            )

            await state.set_state(AddPairStates.confirming_pair)

            confirmation_text = create_pair_confirmation_text(result)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_keyboard = get_confirmation_keyboard("add_pair", result["symbol"])

            await loading_msg.edit_text(
                confirmation_text,
                reply_markup=confirmation_keyboard
            )

            log_user_action(user_id, "pair_validated", symbol=result["symbol"])

        else:
            # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            error_text = create_pair_error_text(result["error"], symbol_input)

            await loading_msg.edit_text(
                error_text,
                reply_markup=get_back_to_menu_keyboard()
            )

            log_user_action(user_id, "pair_validation_failed",
                          symbol=symbol_input, error=result["error"])

    except Exception as e:
        logger.error("Error processing symbol input", user_id=user_id, symbol=symbol_input, error=str(e))

        error_text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–º–≤–æ–ª '{symbol_input}'.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""

        await message.answer(
            error_text,
            reply_markup=get_back_to_menu_keyboard()
        )


@add_pair_router.callback_query(F.data.startswith("confirm_add_pair_"))
async def handle_add_pair_confirmation(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã.

    Args:
        callback: Callback query
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        symbol = data.get("symbol")

        if not symbol:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–µ", show_alert=True)
            await state.clear()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            "‚è≥ <b>–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É...</b>\n\n"
            "–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.",
            reply_markup=get_loading_keyboard()
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
        result = await execute_add_pair(session, user_id, data)

        if result["success"]:
            # –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            success_text = create_pair_added_text(result)

            await callback.message.edit_text(
                success_text,
                reply_markup=get_main_menu_keyboard()
            )

            logger.info(
                "Pair added successfully",
                user_id=user_id,
                symbol=symbol,
                historical_candles=result.get("historical_candles", 0)
            )
        else:
            # –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            error_text = create_add_error_text(result["error"])

            await callback.message.edit_text(
                error_text,
                reply_markup=get_main_menu_keyboard()
            )

        await callback.answer()
        await state.clear()

    except Exception as e:
        logger.error("Error confirming pair addition", user_id=user_id, error=str(e))
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()


@add_pair_router.callback_query(F.data.startswith("cancel_add_pair"))
async def handle_add_pair_cancellation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã.

    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        await state.clear()

        cancel_text = (
            "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ø–∞—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )

        await callback.message.edit_text(
            cancel_text,
            reply_markup=get_main_menu_keyboard()
        )

        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        logger.info("User cancelled pair addition", user_id=user_id)

    except Exception as e:
        logger.error("Error cancelling pair addition", user_id=user_id, error=str(e))
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)


def register_add_pair_handlers(dp):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    dp.include_router(add_pair_router)