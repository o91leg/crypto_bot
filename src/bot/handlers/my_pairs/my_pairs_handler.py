"""
–ü—É—Ç—å: src/bot/handlers/my_pairs/my_pairs_handler.py
–û–ø–∏—Å–∞–Ω–∏–µ: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ê–≤—Ç–æ—Ä: Crypto Bot Team
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-07-28
"""

from datetime import datetime
import re
import structlog

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from data.models.user_pair_model import UserPair
from utils.logger import log_user_action
from .my_pairs_formatters import (
    create_no_pairs_message,
    create_pairs_list_message,
    create_pair_management_message,
    create_rsi_display_message,
    create_rsi_error_message,
)
from .my_pairs_keyboards import (
    create_no_pairs_keyboard,
    create_pairs_list_keyboard,
    create_pair_management_keyboard,
    create_rsi_display_keyboard,
    get_back_to_management_keyboard,
)
from .my_pairs_logic import calculate_rsi_for_pair

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = structlog.get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
my_pairs_router = Router()


# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à –ø–æ–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–º
class TempIndicatorCache:
    async def get_rsi(self, symbol, timeframe, period):
        return None

    async def invalidate_indicators(self, symbol):
        return True


indicator_cache = TempIndicatorCache()


async def safe_edit_message(
    message,
    new_text: str,
    reply_markup=None,
    max_retries: int = 3,
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        new_text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        reply_markup: –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        max_retries: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
    """
    try:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç (—É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        import re

        current_text = re.sub(r"<[^>]+>", "", message.text or "").strip()
        new_text_clean = re.sub(r"<[^>]+>", "", new_text).strip()

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ - –¥–æ–±–∞–≤–ª—è–µ–º timestamp
        if current_text == new_text_clean:
            from datetime import datetime

            timestamp = datetime.now().strftime("%H:%M:%S")
            new_text += f"\n\n<i>üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"

        await message.edit_text(new_text, reply_markup=reply_markup)
        return True

    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.warning("Message content is identical, skipping edit")
            return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        else:
            logger.error("Telegram error editing message", error=str(e))
            return False
    except Exception as e:
        logger.error("Unexpected error editing message", error=str(e))
        return False


class MyPairsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏."""

    viewing_pairs = State()
    managing_timeframes = State()
    viewing_rsi = State()


@my_pairs_router.callback_query(F.data == "my_pairs")
async def handle_my_pairs_start(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback: Callback query
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_pairs = await UserPair.get_user_pairs(session, user_id)

        if not user_pairs:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–∞—Ä
            no_pairs_text = create_no_pairs_message()
            await callback.message.edit_text(
                no_pairs_text, reply_markup=create_no_pairs_keyboard()
            )
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä")
            log_user_action(user_id, "my_pairs_empty")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä
        await state.set_state(MyPairsStates.viewing_pairs)

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä
        pairs_text = create_pairs_list_message(user_pairs)
        pairs_keyboard = create_pairs_list_keyboard(user_pairs)

        await callback.message.edit_text(pairs_text, reply_markup=pairs_keyboard)

        await callback.answer()
        log_user_action(user_id, "my_pairs_viewed", pairs_count=len(user_pairs))
        logger.info("User viewed pairs", user_id=user_id, pairs_count=len(user_pairs))

    except Exception as e:
        logger.error("Error showing user pairs", user_id=user_id, error=str(e))
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@my_pairs_router.callback_query(F.data.startswith("manage_pair_"))
async def handle_pair_management(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–æ–π.

    Args:
        callback: Callback query
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–∞—Ä—ã –∏–∑ callback_data
        pair_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        user_pair = await UserPair.get_by_user_and_pair(session, user_id, pair_id)

        if not user_pair:
            await callback.answer("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            pair_id=pair_id, pair_symbol=user_pair.pair.symbol, user_pair=user_pair
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
        await state.set_state(MyPairsStates.managing_timeframes)

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–π
        management_text = create_pair_management_message(user_pair)
        management_keyboard = create_pair_management_keyboard(user_pair)

        await callback.message.edit_text(
            management_text, reply_markup=management_keyboard
        )

        await callback.answer()
        log_user_action(
            user_id, "pair_management_opened", pair_symbol=user_pair.pair.symbol
        )

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error("Error managing pair", user_id=user_id, error=str(e))
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@my_pairs_router.callback_query(F.data.startswith("toggle_timeframe_"))
async def handle_timeframe_toggle(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.

    Args:
        callback: Callback query
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–∑ callback_data
        timeframe = callback.data.split("_")[-1]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        pair_id = data.get("pair_id")

        if not pair_id:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–π –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
        user_pair = await UserPair.get_by_user_and_pair(session, user_id, pair_id)

        if not user_pair:
            await callback.answer("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
        new_state = user_pair.toggle_timeframe(timeframe)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        session.add(user_pair)
        await session.commit()

        # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –í–ö–õ–Æ–ß–ò–õ–ò - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if new_state:  # –¢–∞–π–º—Ñ—Ä–µ–π–º –≤–∫–ª—é—á–µ–Ω
            await callback.message.edit_text(
                f"üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe}</b>\n\n"
                f"–ü–∞—Ä–∞: {user_pair.pair.display_name}\n\n"
                f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...",
                reply_markup=create_pair_management_keyboard(user_pair),
            )

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            from services.data_fetchers.historical.historical_fetcher import (
                HistoricalDataFetcher,
            )

            try:
                async with HistoricalDataFetcher() as fetcher:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch_timeframe_data –≤–º–µ—Å—Ç–æ fetch_pair_historical_data
                    loaded_candles = await fetcher.fetch_timeframe_data(
                        session=session,
                        pair_id=pair_id,
                        symbol=user_pair.pair.symbol,
                        timeframe=timeframe,  # –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º
                        limit=500,
                    )

                logger.info(
                    "Timeframe data loaded automatically",
                    timeframe=timeframe,
                    candles_loaded=loaded_candles,
                    pair_symbol=user_pair.pair.symbol,
                )

                if loaded_candles > 0:
                    success_message = f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º {timeframe} –≤–∫–ª—é—á–µ–Ω\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_candles} —Å–≤–µ—á–µ–π"
                else:
                    success_message = (
                        f"‚ö†Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º {timeframe} –≤–∫–ª—é—á–µ–Ω\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
                    )

            except Exception as e:
                logger.error(
                    "Error loading timeframe data", timeframe=timeframe, error=str(e)
                )
                success_message = f"‚ö†Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º {timeframe} –≤–∫–ª—é—á–µ–Ω\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:50]}"

        else:  # –¢–∞–π–º—Ñ—Ä–µ–π–º –≤—ã–∫–ª—é—á–µ–Ω
            success_message = f"‚ùå –¢–∞–π–º—Ñ—Ä–µ–π–º {timeframe} –æ—Ç–∫–ª—é—á–µ–Ω"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        await state.update_data(user_pair=user_pair)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        management_text = create_pair_management_message(user_pair)
        management_keyboard = create_pair_management_keyboard(user_pair)

        await callback.message.edit_text(
            management_text, reply_markup=management_keyboard
        )

        await callback.answer(success_message)

        log_user_action(
            user_id,
            "timeframe_toggled",
            timeframe=timeframe,
            new_state=new_state,
            pair_symbol=user_pair.pair.symbol,
        )

    except Exception as e:
        logger.error("Error toggling timeframe", user_id=user_id, error=str(e))
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@my_pairs_router.callback_query(F.data.startswith("view_rsi_"))
async def handle_rsi_view(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä RSI –¥–ª—è –ø–∞—Ä—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

    Args:
        callback: Callback query
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–∞—Ä—ã –∏–∑ callback_data
        pair_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        user_pair = await UserPair.get_by_user_and_pair(session, user_id, pair_id)

        if not user_pair:
            await callback.answer("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É RSI
        await state.set_state(MyPairsStates.viewing_rsi)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        from data.models.candle_model import Candle

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã 15 —Å–≤–µ—á–µ–π –¥–ª—è RSI
        has_sufficient_data = False
        for timeframe in user_pair.get_enabled_timeframes():
            candle_count = await Candle.count_candles(session, pair_id, timeframe)
            if candle_count >= 15:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è RSI
                has_sufficient_data = True
                break

        if not has_sufficient_data:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            await safe_edit_message(
                callback.message,
                (
                    f"üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                    f"–ü–∞—Ä–∞: {user_pair.pair.display_name}\n\n"
                    f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI...\n"
                    f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥."
                ),
                reply_markup=get_back_to_management_keyboard(pair_id),
            )

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            from services.data_fetchers.historical.historical_fetcher import (
                HistoricalDataFetcher,
            )
            from config.bot_config import get_bot_config

            config = get_bot_config()
            try:
                async with HistoricalDataFetcher() as fetcher:
                    historical_candles = await fetcher.fetch_pair_historical_data(
                        session=session,
                        pair_id=pair_id,
                        symbol=user_pair.pair.symbol,
                        timeframes=user_pair.get_enabled_timeframes(),
                        limit=500,  # –ó–∞–≥—Ä—É–∂–∞–µ–º 500 —Å–≤–µ—á–µ–π
                    )

                logger.info(
                    "Historical data loaded for RSI",
                    pair_symbol=user_pair.pair.symbol,
                    candles_loaded=historical_candles,
                )

                if historical_candles == 0:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    error_text = f"""‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b>

–ü–∞—Ä–∞: {user_pair.pair.display_name}

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Binance API
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""

                    await safe_edit_message(
                        callback.message,
                        error_text,
                        reply_markup=get_back_to_management_keyboard(pair_id),
                    )
                    return

            except Exception as e:
                logger.error("Error loading historical data for RSI", error=str(e))

                error_text = f"""‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>

–ü–∞—Ä–∞: {user_pair.pair.display_name}

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)[:100]}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""

                await safe_edit_message(
                    callback.message,
                    error_text,
                    reply_markup=get_back_to_management_keyboard(pair_id),
                )
                return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—á–µ—Ç–∞ RSI
        await safe_edit_message(
            callback.message,
            (
                f"üî¢ <b>–†–∞—Å—á–µ—Ç RSI</b>\n\n"
                f"–ü–∞—Ä–∞: {user_pair.pair.display_name}\n\n"
                f"‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã..."
            ),
            reply_markup=get_back_to_management_keyboard(pair_id),
        )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        rsi_data = await calculate_rsi_for_pair(session, user_pair)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ RSI
        has_valid_rsi = any(
            "error" not in data and data.get("value") is not None
            for data in rsi_data.values()
        )

        if not has_valid_rsi:
            # –í—Å—ë –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI
            error_text = f"""‚ö†Ô∏è <b>RSI –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

–ü–∞—Ä–∞: {user_pair.pair.display_name}

–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å–≤–µ—á–µ–π.

<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>
‚Ä¢ –ü–æ–¥–æ–∂–¥–∞—Ç—å 5-10 –º–∏–Ω—É—Ç
‚Ä¢ –ù–∞–∂–∞—Ç—å "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –µ—â—ë —Ä–∞–∑
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã"""

            await safe_edit_message(
                callback.message,
                error_text,
                reply_markup=create_rsi_display_keyboard(pair_id),
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å RSI –¥–∞–Ω–Ω—ã–º–∏
        rsi_text = create_rsi_display_message(user_pair, rsi_data)
        rsi_keyboard = create_rsi_display_keyboard(pair_id)

        await safe_edit_message(
            callback.message,
            rsi_text,
            reply_markup=rsi_keyboard,
        )

        await callback.answer()
        log_user_action(user_id, "rsi_viewed", pair_symbol=user_pair.pair.symbol)

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error("Error viewing RSI", user_id=user_id, error=str(e))

        error_text = create_rsi_error_message()
        await safe_edit_message(
            callback.message,
            error_text,
            reply_markup=get_back_to_management_keyboard(pair_id),
        )


@my_pairs_router.callback_query(F.data.startswith("back_to_management_"))
async def handle_back_to_management(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–π.

    Args:
        callback: Callback query
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–∞—Ä—ã
        pair_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É
        user_pair = await UserPair.get_by_user_and_pair(session, user_id, pair_id)

        if not user_pair:
            await callback.answer("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        await state.set_state(MyPairsStates.managing_timeframes)
        await state.update_data(pair_id=pair_id, user_pair=user_pair)

        management_text = create_pair_management_message(user_pair)
        management_keyboard = create_pair_management_keyboard(user_pair)

        await callback.message.edit_text(
            management_text, reply_markup=management_keyboard
        )

        await callback.answer()

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error("Error returning to management", user_id=user_id, error=str(e))
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


def register_my_pairs_handlers(dp):
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    dp.include_router(my_pairs_router)


@my_pairs_router.callback_query(F.data.startswith("rsi_current_"))
async def handle_rsi_current_view(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI –∏–∑ –∫–µ—à–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

    Args:
        callback: Callback query —Å –¥–∞–Ω–Ω—ã–º–∏ "rsi_current:SYMBOL"
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–∞—Ä—ã –∏–∑ callback data
        pair_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        user_pair = await UserPair.get_by_user_and_pair(session, user_id, pair_id)

        if not user_pair:
            await callback.answer("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        logger.info(
            "Showing current RSI values", user_id=user_id, symbol=user_pair.pair.symbol
        )

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è RSI –∏–∑ –∫–µ—à–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        rsi_values = {}
        enabled_timeframes = user_pair.get_enabled_timeframes()

        for timeframe in enabled_timeframes:
            try:
                # –ü–æ–∫–∞ –∫–µ—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                rsi_value = None
                if rsi_value is not None:
                    rsi_values[timeframe] = rsi_value
            except Exception as e:
                logger.error(
                    "Error getting RSI value from cache",
                    symbol=user_pair.pair.symbol,
                    timeframe=timeframe,
                    error=str(e),
                )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        from services.notifications.message_formatter import MessageFormatter

        formatter = MessageFormatter()
        message_text = formatter.format_rsi_current_values(
            user_pair.pair.symbol, rsi_values
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()

        builder.row(
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"rsi_current_{pair_id}"
            )
        )

        builder.row(
            InlineKeyboardButton(
                text="üìä –ü–æ–ª–Ω—ã–π RSI", callback_data=f"view_rsi_{pair_id}"
            )
        )

        builder.row(
            InlineKeyboardButton(
                text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–π", callback_data=f"back_to_management_{pair_id}"
            )
        )

        builder.row(
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )

        keyboard = builder.as_markup()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=message_text, reply_markup=keyboard, parse_mode="HTML"
        )

        await callback.answer()

        log_user_action(
            user_id, "rsi_current_viewed", pair_symbol=user_pair.pair.symbol
        )

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error("Error showing current RSI values", user_id=user_id, error=str(e))

        await callback.answer(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö RSI", show_alert=True
        )


@my_pairs_router.callback_query(F.data.startswith("refresh_rsi_"))
async def handle_refresh_rsi(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å RSI –¥–∞–Ω–Ω—ã–µ.

    Args:
        callback: Callback query
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    user_id = callback.from_user.id

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–∞—Ä—ã
        pair_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É
        user_pair = await UserPair.get_by_user_and_pair(session, user_id, pair_id)

        if not user_pair:
            await callback.answer("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RSI</b>\n\n"
            f"–ü–∞—Ä–∞: {user_pair.pair.display_name}\n\n"
            f"‚è≥ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...",
            reply_markup=get_back_to_management_keyboard(pair_id),
        )

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–µ—à –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
        await indicator_cache.invalidate_indicators(user_pair.pair.symbol)

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
        rsi_data = await calculate_rsi_for_pair(session, user_pair)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        rsi_text = create_rsi_display_message(user_pair, rsi_data)
        rsi_keyboard = create_rsi_display_keyboard(pair_id)

        await callback.message.edit_text(rsi_text, reply_markup=rsi_keyboard)

        await callback.answer("‚úÖ RSI –æ–±–Ω–æ–≤–ª–µ–Ω")
        log_user_action(user_id, "rsi_refreshed", pair_symbol=user_pair.pair.symbol)

    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error("Error refreshing RSI", user_id=user_id, error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ RSI", show_alert=True)
