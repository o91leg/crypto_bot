"""
–ü—É—Ç—å: src/bot/handlers/debug_rsi_handler.py
–û–ø–∏—Å–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–ª–∞–¥–∫–∏ RSI
–ê–≤—Ç–æ—Ä: Crypto Bot Team
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-07-30
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from utils.rsi_debug import debug_rsi_calculation
from services.indicators.rsi_calculator import RSICalculator
from data.models.candle_model import Candle
from utils.logger import get_logger

debug_router = Router()
logger = get_logger(__name__)

@debug_router.message(Command("debug_rsi"))
async def handle_debug_rsi(message: Message, session: AsyncSession):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ RSI.
    –§–æ—Ä–º–∞—Ç: /debug_rsi BTCUSDT 1h
    """
    user_id = message.from_user.id
    
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
    if user_id != 198024201:  # –í–∞—à Telegram ID
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = message.text.split()
        if len(args) != 3:
            await message.reply("–§–æ—Ä–º–∞—Ç: /debug_rsi BTCUSDT 1h")
            return
            
        symbol = args[1].upper()
        timeframe = args[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É
        from data.models.pair_model import Pair
        pair = await Pair.get_by_symbol(session, symbol)
        if not pair:
            await message.reply(f"‚ùå –ü–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π
        candles = await Candle.get_latest_candles(
            session=session,
            pair_id=pair.id,
            timeframe=timeframe,
            limit=50
        )
        
        if len(candles) < 15:
            await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(candles)} —Å–≤–µ—á–µ–π")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
        prices = [float(candle.close_price) for candle in candles]
        
        # –û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        debug_info = debug_rsi_calculation(prices, 14)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –Ω–∞—à–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
        rsi_calc = RSICalculator()
        rsi_result = rsi_calc.calculate_standard_rsi(prices, 14)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"""üîç <b>–û—Ç–ª–∞–¥–∫–∞ RSI –¥–ª—è {symbol} ({timeframe})</b>

<b>–î–∞–Ω–Ω—ã–µ:</b>
- –°–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(candles)}
- –¶–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: {len(prices)}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–µ–Ω:</b>
{' ‚Üí '.join([str(round(p, 2)) for p in prices[-5:]])}

<b>–†–∞—Å—á–µ—Ç:</b>
- –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {debug_info.get('avg_gain', 'N/A')}
- –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {debug_info.get('avg_loss', 'N/A')}
- RS: {debug_info.get('rs', 'N/A')}

<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
- –ù–∞—à RSI: {rsi_result.value if rsi_result else '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞'}
- –û—Ç–ª–∞–¥–æ—á–Ω—ã–π RSI: {debug_info.get('rsi', 'N/A')}

<i>–°—Ä–∞–≤–Ω–∏—Ç–µ —Å TradingView –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏</i>"""

        await message.reply(response)
        
    except Exception as e:
        logger.error("Error in debug RSI", error=str(e), user_id=user_id)
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def register_debug_handlers(dp):
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–ª–∞–¥–∫–∏"""
    dp.include_router(debug_router)
