"""
–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ RSI
"""
import asyncio
from data.database import get_session, init_database
from data.models.pair_model import Pair
from data.models.candle_model import Candle
from services.indicators.rsi_calculator import RSICalculator
from sqlalchemy import select


async def test_rsi_calculation():
    await init_database()

    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º BTC –ø–∞—Ä—É
        result = await session.execute(select(Pair).where(Pair.symbol == 'BTCUSDT'))
        btc_pair = result.scalar_one_or_none()

        if not btc_pair:
            print("‚ùå BTC –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞: {btc_pair.symbol} (ID: {btc_pair.id})")

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è 1m
        result = await session.execute(
            select(Candle)
            .where(Candle.pair_id == btc_pair.id, Candle.timeframe == '1m')
            .order_by(Candle.open_time.asc())
            .limit(50)
        )
        candles = result.scalars().all()

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(candles)}")

        if len(candles) < 15:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è RSI")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        prices = [float(candle.close_price) for candle in candles]
        print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–µ–Ω: {prices[-5:]}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
        print("\nüî¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º RSI –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä...")

        try:
            rsi_calc = RSICalculator()
            rsi_result = rsi_calc.calculate_standard_rsi(prices, 14)

            if rsi_result:
                print(f"‚úÖ RSI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω: {rsi_result.value}")
                print(f"üìà –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {rsi_result.interpretation}")
            else:
                print("‚ùå RSI –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω (–≤–µ—Ä–Ω—É–ª None)")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {str(e)}")
            import traceback
            traceback.print_exc()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
        print("\nüî¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Candle.get_latest_candles...")

        try:
            candles_via_model = await Candle.get_latest_candles(
                session=session,
                pair_id=btc_pair.id,
                timeframe='1m',
                limit=50
            )

            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å: {len(candles_via_model)} —Å–≤–µ—á–µ–π")

            if candles_via_model:
                model_prices = [float(c.close_price) for c in candles_via_model]
                print(f"üìä –¶–µ–Ω—ã —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å: {model_prices[-5:]}")

                rsi_result2 = rsi_calc.calculate_standard_rsi(model_prices, 14)
                if rsi_result2:
                    print(f"‚úÖ RSI —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å: {rsi_result2.value}")
                else:
                    print("‚ùå RSI —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å: {str(e)}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_rsi_calculation())