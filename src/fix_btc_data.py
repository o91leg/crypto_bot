"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTC - –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
"""
import asyncio
from data.database import get_session, init_database
from data.models.pair_model import Pair
from services.data_fetchers.historical.historical_fetcher import HistoricalDataFetcher
from sqlalchemy import select


async def fix_btc_data():
    await init_database()

    async with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º BTC –ø–∞—Ä—É
        result = await session.execute(select(Pair).where(Pair.symbol == 'BTCUSDT'))
        btc_pair = result.scalar_one_or_none()

        if not btc_pair:
            print("‚ùå BTC –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞: {btc_pair.symbol} (ID: {btc_pair.id})")

        # –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è BTC
        missing_timeframes = ['5m', '15m', '1h', '2h', '4h', '1d', '1w']

        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è BTC: {missing_timeframes}")

        try:
            async with HistoricalDataFetcher() as fetcher:
                candles_loaded = await fetcher.fetch_pair_historical_data(
                    session=session,
                    pair_id=btc_pair.id,
                    symbol='BTCUSDT',
                    timeframes=missing_timeframes,
                    limit=500
                )

                print(f"‚úÖ BTCUSDT: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {candles_loaded} —Å–≤–µ—á–µ–π")
                await session.commit()
                print("üéâ –î–∞–Ω–Ω—ã–µ –¥–ª—è BTC –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BTC –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            import traceback
            traceback.print_exc()
            await session.rollback()


if __name__ == "__main__":
    asyncio.run(fix_btc_data())