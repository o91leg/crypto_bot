"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'src'))

from sqlalchemy import text
from data.database import get_session, init_database

async def check_candles_data():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –ë–î –ø–æ –ø–∞—Ä–∞–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º"""
    await init_database()

    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        result = await session.execute(text("SELECT COUNT(*) FROM candles"))
        total_candles = result.scalar()
        print(f"‚úÖ –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –≤ –ë–î: {total_candles}")

        if total_candles == 0:
            print("‚ùå –ö–†–ò–¢–ò–ß–ù–û: –í –ë–î –Ω–µ—Ç —Å–≤–µ—á–µ–π!")
            return

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã pairs
        result = await session.execute(text("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'pairs'
            ORDER BY ordinal_position
        """))

        print("\n–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ pairs:")
        columns = []
        for row in result:
            columns.append(row.column_name)
            print(f"  - {row.column_name} ({row.data_type})")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        if 'name' in columns:
            name_column = 'p.name'
        elif 'display_name' in columns:
            name_column = 'p.display_name'
        else:
            name_column = 'p.symbol'  # fallback

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ä–∞–º
        result = await session.execute(text(f"""
            SELECT p.symbol, {name_column} as name, COUNT(c.id) as candle_count
            FROM pairs p 
            LEFT JOIN candles c ON p.id = c.pair_id 
            GROUP BY p.id, p.symbol, {name_column}
            ORDER BY candle_count DESC
        """))

        print("\n–°–≤–µ—á–∏ –ø–æ –ø–∞—Ä–∞–º:")
        for row in result:
            print(f"  üìä {row.symbol} ({row.name}): {row.candle_count} —Å–≤–µ—á–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        result = await session.execute(text("""
            SELECT timeframe, COUNT(*) as count 
            FROM candles 
            GROUP BY timeframe 
            ORDER BY count DESC
        """))

        print("\n–°–≤–µ—á–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
        for row in result:
            print(f"  ‚è∞ {row.timeframe}: {row.count} —Å–≤–µ—á–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        result = await session.execute(text("""
            SELECT p.symbol, c.timeframe, c.close_price, c.open_time
            FROM candles c 
            JOIN pairs p ON c.pair_id = p.id 
            ORDER BY c.open_time DESC 
            LIMIT 5
        """))

        print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π:")
        for row in result:
            print(f"  üïê {row.symbol} {row.timeframe}: ${row.close_price} (–≤—Ä–µ–º—è: {row.open_time})")

if __name__ == "__main__":
    asyncio.run(check_candles_data())