"""
–ü—É—Ç—å: src/services/notifications/message_formatter.py
–û–ø–∏—Å–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
–ê–≤—Ç–æ—Ä: Crypto Bot Team
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-07-29
"""

from typing import Optional, Dict, Any, List
from decimal import Decimal
from datetime import datetime

from utils.constants import EMOJI, TREND_EMOJIS, CURRENCY_SYMBOLS
from utils.logger import get_logger


class MessageFormatter:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.

    –í–∫–ª—é—á–∞–µ—Ç:
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ RSI/EMA
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    - –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    - HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è Telegram
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.logger = get_logger(__name__)

    def format_signal_message(
            self,
            symbol: str,
            timeframe: str,
            price: float,
            price_change_percent: Optional[float] = None,
            rsi_value: Optional[float] = None,
            rsi_signal_type: Optional[str] = None,
            volume_change_percent: Optional[float] = None,
            ema_trend: Optional[str] = None,
            signal_type: str = "rsi_signal"
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ.

        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            price_change_percent: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ %
            rsi_value: –ó–Ω–∞—á–µ–Ω–∏–µ RSI
            rsi_signal_type: –¢–∏–ø RSI —Å–∏–≥–Ω–∞–ª–∞
            volume_change_percent: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –≤ %
            ema_trend: –¢—Ä–µ–Ω–¥ EMA
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            signal_emoji = self._get_signal_emoji(rsi_signal_type or signal_type)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = f"{signal_emoji} <b>{symbol}</b> - {timeframe}"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price_text = self._format_price_line(price, price_change_percent)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º RSI
            rsi_text = self._format_rsi_line(rsi_value, rsi_signal_type)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º
            volume_text = self._format_volume_line(volume_change_percent)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º EMA —Ç—Ä–µ–Ω–¥
            ema_text = self._format_ema_trend_line(ema_trend)

            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_parts = [header, price_text]

            if rsi_text:
                message_parts.append(rsi_text)

            if volume_text:
                message_parts.append(volume_text)

            if ema_text:
                message_parts.append(ema_text)

            message = "\n".join(message_parts)

            self.logger.debug(
                "Signal message formatted",
                symbol=symbol,
                timeframe=timeframe,
                signal_type=signal_type
            )

            return message

        except Exception as e:
            self.logger.error(
                "Error formatting signal message",
                symbol=symbol,
                timeframe=timeframe,
                error=str(e)
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return f"üîî {symbol} - {timeframe}\n–¶–µ–Ω–∞: ${price:.4f}"

    def format_pair_added_message(
            self,
            symbol: str,
            current_price: Optional[float] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã.

        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"‚úÖ <b>–ü–∞—Ä–∞ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b>\n\n"

        if current_price:
            message += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${current_price:.4f}</b>\n"

        message += (
            f"{EMOJI['bell']} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤\n"
            f"{EMOJI['chart']} –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...\n\n"
            f"<i>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã RSI –∏ EMA –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã</i>"
        )

        return message

    def format_pair_removed_message(self, symbol: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã.

        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return (
            f"‚ùå <b>–ü–∞—Ä–∞ {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n"
            f"{EMOJI['info']} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
            f"<i>–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>"
        )

    def format_my_pairs_message(
            self,
            pairs: List[Dict[str, Any]],
            user_name: Optional[str] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            pairs: –°–ø–∏—Å–æ–∫ –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if user_name:
            header = f"üìà <b>–ü–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}</b>\n\n"
        else:
            header = "üìà <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã</b>\n\n"

        if not pairs:
            return (
                    header +
                    f"{EMOJI['info']} –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É\"</b> –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
            )

        pairs_text = []
        for pair in pairs:
            symbol = pair.get("symbol", "")
            current_price = pair.get("current_price")
            price_change = pair.get("price_change_24h")
            active_timeframes = pair.get("active_timeframes", 0)

            pair_line = f"‚Ä¢ <b>{symbol}</b>"

            if current_price:
                pair_line += f" - ${current_price:.4f}"

                if price_change is not None:
                    change_emoji = "üìà" if price_change >= 0 else "üìâ"
                    pair_line += f" ({change_emoji}{price_change:+.2f}%)"

            pair_line += f"\n  {EMOJI['gear']} –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {active_timeframes}"

            pairs_text.append(pair_line)

        message = header + "\n\n".join(pairs_text)
        message += f"\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤</i>"

        return message

    def format_rsi_current_values(
            self,
            symbol: str,
            rsi_values: Dict[str, float]
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI.

        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            rsi_values: –°–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏–π RSI –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        header = f"üìä <b>RSI –¥–ª—è {symbol}</b>\n\n"

        if not rsi_values:
            return header + "‚è≥ –î–∞–Ω–Ω—ã–µ RSI –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è..."

        rsi_lines = []
        for timeframe in ["1m", "5m", "15m", "1h", "2h", "4h", "1d", "1w"]:
            if timeframe in rsi_values:
                rsi_value = rsi_values[timeframe]
                rsi_emoji = self._get_rsi_emoji(rsi_value)
                zone_text = self._get_rsi_zone_text(rsi_value)

                rsi_lines.append(
                    f"{rsi_emoji} <b>{timeframe}</b>: {rsi_value:.1f} <i>({zone_text})</i>"
                )

        if rsi_lines:
            message = header + "\n".join(rsi_lines)
        else:
            message = header + "‚è≥ –î–∞–Ω–Ω—ã–µ RSI –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è..."

        message += f"\n\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>"

        return message

    def format_settings_message(
            self,
            notifications_enabled: bool,
            total_pairs: int,
            active_timeframes: int
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.

        Args:
            notifications_enabled: –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            total_pairs: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
            active_timeframes: –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        status_emoji = "üîî" if notifications_enabled else "üîï"
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

        message = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            f"{status_emoji} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {status_text}\n"
            f"üìà <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä:</b> {total_pairs}\n"
            f"‚è∞ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤:</b> {active_timeframes}\n\n"
            f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</i>"
        )

        return message

    def format_help_message(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return (
            f"‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"

            f"<b>üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:</b>\n"
            f"1. –î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL)\n"
            f"2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã\n"
            f"3. –ü–æ–ª—É—á–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n\n"

            f"<b>üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
            f"‚Ä¢ <b>RSI</b> - –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã\n"
            f"  üî¥ &lt;25: —Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å\n"
            f"  üü† 25-30: —Å—Ä–µ–¥–Ω—è—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å\n"
            f"  üü° 30-70: –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞\n"
            f"  üü† 70-75: —Å—Ä–µ–¥–Ω—è—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å\n"
            f"  üî¥ &gt;75: —Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å\n\n"

            f"‚Ä¢ <b>EMA</b> - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ\n"
            f"  üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥\n"
            f"  üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥\n"
            f"  ‚û°Ô∏è –ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ\n\n"

            f"<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ü—Ä–∏—Ö–æ–¥—è—Ç –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∑–æ–Ω—ã RSI\n"
            f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã\n"
            f"‚Ä¢ –í–∫–ª—é—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–º–µ\n\n"

            f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            f"‚Ä¢ –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π RSI\n\n"

            f"<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>"
        )

    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

    def _format_price_line(
            self,
            price: float,
            price_change_percent: Optional[float] = None
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–æ–π."""
        price_text = f"–¶–µ–Ω–∞: <b>${price:.4f}</b>"

        if price_change_percent is not None:
            if price_change_percent >= 0:
                change_emoji = "üìà"
                sign = "+"
            else:
                change_emoji = "üìâ"
                sign = ""

            price_text += f" ({change_emoji}{sign}{price_change_percent:.1f}%)"

        return price_text

    def _format_rsi_line(
            self,
            rsi_value: Optional[float],
            rsi_signal_type: Optional[str]
    ) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å RSI."""
        if rsi_value is None:
            return None

        rsi_emoji = self._get_rsi_emoji(rsi_value)
        zone_text = self._get_rsi_zone_text(rsi_value)

        return f"RSI: <b>{rsi_value:.1f}</b> {rsi_emoji} <i>({zone_text})</i>"

    def _format_volume_line(
            self,
            volume_change_percent: Optional[float]
    ) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –æ–±—ä–µ–º–æ–º."""
        if volume_change_percent is None:
            return None

        if volume_change_percent >= 0:
            volume_emoji = "üìä"
            sign = "+"
        else:
            volume_emoji = "üìâ"
            sign = ""

        return f"–û–±—ä–µ–º: {volume_emoji} {sign}{volume_change_percent:.0f}% –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏"

    def _format_ema_trend_line(
            self,
            ema_trend: Optional[str]
    ) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å EMA —Ç—Ä–µ–Ω–¥–æ–º."""
        if not ema_trend:
            return None

        trend_emoji = TREND_EMOJIS.get(ema_trend, "‚û°Ô∏è")

        trend_names = {
            "bullish": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π",
            "bearish": "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π",
            "sideways": "–±–æ–∫–æ–≤–æ–π",
            "strong_up": "—Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç",
            "strong_down": "—Å–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ"
        }

        trend_name = trend_names.get(ema_trend, ema_trend)

        return f"EMA —Ç—Ä–µ–Ω–¥: {trend_emoji} <i>{trend_name}</i>"

    def _get_signal_emoji(self, signal_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞."""
        signal_emojis = {
            "rsi_oversold_strong": "üî¥",
            "rsi_oversold_medium": "üü†",
            "rsi_oversold_normal": "üü°",
            "rsi_overbought_normal": "üü°",
            "rsi_overbought_medium": "üü†",
            "rsi_overbought_strong": "üî¥",
            "ema_cross_up": "üöÄ",
            "ema_cross_down": "üí•",
            "volume_spike": "üî•"
        }

        return signal_emojis.get(signal_type, "üîî")

    def _get_rsi_emoji(self, rsi_value: float) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è RSI."""
        if rsi_value < 20:
            return "üî¥"
        elif rsi_value < 25:
            return "üü†"
        elif rsi_value < 30:
            return "üü°"
        elif rsi_value > 80:
            return "üî¥"
        elif rsi_value > 75:
            return "üü†"
        elif rsi_value > 70:
            return "üü°"
        else:
            return "üü¢"

    def _get_rsi_zone_text(self, rsi_value: float) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–æ–Ω—ã RSI."""
        if rsi_value < 20:
            return "—Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
        elif rsi_value < 25:
            return "—Å—Ä–µ–¥–Ω—è—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
        elif rsi_value < 30:
            return "–æ–±—ã—á–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
        elif rsi_value > 80:
            return "—Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
        elif rsi_value > 75:
            return "—Å—Ä–µ–¥–Ω—è—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
        elif rsi_value > 70:
            return "–æ–±—ã—á–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
        else:
            return "–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
def format_signal_message(
        symbol: str,
        timeframe: str,
        price: float,
        price_change_percent: Optional[float] = None,
        rsi_value: Optional[float] = None,
        rsi_signal_type: Optional[str] = None,
        volume_change_percent: Optional[float] = None,
        ema_trend: Optional[str] = None,
        signal_type: str = "rsi_signal"
) -> str:
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.

    Args:
        symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
        price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        price_change_percent: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ %
        rsi_value: –ó–Ω–∞—á–µ–Ω–∏–µ RSI
        rsi_signal_type: –¢–∏–ø RSI —Å–∏–≥–Ω–∞–ª–∞
        volume_change_percent: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –≤ %
        ema_trend: –¢—Ä–µ–Ω–¥ EMA
        signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    formatter = MessageFormatter()
    return formatter.format_signal_message(
        symbol=symbol,
        timeframe=timeframe,
        price=price,
        price_change_percent=price_change_percent,
        rsi_value=rsi_value,
        rsi_signal_type=rsi_signal_type,
        volume_change_percent=volume_change_percent,
        ema_trend=ema_trend,
        signal_type=signal_type
    )