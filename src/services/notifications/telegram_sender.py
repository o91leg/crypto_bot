"""
–ü—É—Ç—å: src/services/notifications/telegram_sender.py
–û–ø–∏—Å–∞–Ω–∏–µ: –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ Telegram
–ê–≤—Ç–æ—Ä: Crypto Bot Team
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-07-29
"""

import asyncio
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter, TelegramForbiddenError

from bot.keyboards.main_menu_kb import get_main_menu_keyboard
from utils.logger import get_logger
from utils.constants import MAX_NOTIFICATIONS_PER_MINUTE, MAX_NOTIFICATIONS_PER_HOUR
from utils.exceptions import NotificationError


class TelegramSender:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram.

    –í–∫–ª—é—á–∞–µ—Ç:
    - Rate limiting (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã)
    - Retry –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞.

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        """
        self.bot = bot
        self.logger = get_logger(__name__)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.stats = {
            "sent_total": 0,
            "sent_today": 0,
            "failed_total": 0,
            "blocked_users": set(),
            "last_reset": datetime.now().date()
        }

        # Rate limiting
        self.user_message_counts = {}  # user_id -> [timestamps]

    async def send_signal_notification(
            self,
            user_id: int,
            symbol: str,
            timeframe: str,
            signal_data: Dict[str, Any],
            priority: str = "MEDIUM"
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
            if not await self._check_rate_limit(user_id, priority):
                self.logger.warning(
                    "Rate limit exceeded for user",
                    user_id=user_id,
                    symbol=symbol,
                    timeframe=timeframe
                )
                return False

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            from services.notifications.message_formatter import format_signal_message
            message_text = format_signal_message(
                symbol=symbol,
                timeframe=timeframe,
                **signal_data
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="main_menu")]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await self._send_message_with_retry(
                user_id=user_id,
                text=message_text,
                reply_markup=keyboard,
                max_retries=3
            )

            if success:
                await self._update_sending_stats(user_id, success=True)
                self.logger.info(
                    "Signal notification sent successfully",
                    user_id=user_id,
                    symbol=symbol,
                    timeframe=timeframe,
                    signal_type=signal_data.get("signal_type")
                )
            else:
                await self._update_sending_stats(user_id, success=False)

            return success

        except Exception as e:
            self.logger.error(
                "Error sending signal notification",
                user_id=user_id,
                symbol=symbol,
                timeframe=timeframe,
                error=str(e)
            )
            await self._update_sending_stats(user_id, success=False)
            return False

    async def send_system_message(
            self,
            user_id: int,
            message: str,
            keyboard: Optional[InlineKeyboardMarkup] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            success = await self._send_message_with_retry(
                user_id=user_id,
                text=message,
                reply_markup=keyboard,
                max_retries=2
            )

            if success:
                self.logger.debug(
                    "System message sent successfully",
                    user_id=user_id,
                    message_length=len(message)
                )

            return success

        except Exception as e:
            self.logger.error(
                "Error sending system message",
                user_id=user_id,
                error=str(e)
            )
            return False

    async def send_bulk_notifications(
            self,
            notifications: List[Dict[str, Any]],
            delay_between_sends: float = 0.05
    ) -> Dict[str, int]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

        Args:
            notifications: –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            delay_between_sends: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—Å–µ–∫)

        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        results = {
            "total": len(notifications),
            "sent": 0,
            "failed": 0,
            "rate_limited": 0
        }

        self.logger.info(
            "Starting bulk notification sending",
            total_notifications=len(notifications)
        )

        for notification in notifications:
            try:
                user_id = notification["user_id"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if user_id in self.stats["blocked_users"]:
                    results["failed"] += 1
                    continue

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if notification["type"] == "signal":
                    success = await self.send_signal_notification(
                        user_id=user_id,
                        symbol=notification["symbol"],
                        timeframe=notification["timeframe"],
                        signal_data=notification["signal_data"],
                        priority=notification.get("priority", "MEDIUM")
                    )
                else:
                    success = await self.send_system_message(
                        user_id=user_id,
                        message=notification["message"],
                        keyboard=notification.get("keyboard")
                    )

                if success:
                    results["sent"] += 1
                else:
                    results["failed"] += 1

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                if delay_between_sends > 0:
                    await asyncio.sleep(delay_between_sends)

            except Exception as e:
                self.logger.error(
                    "Error in bulk notification",
                    notification=notification,
                    error=str(e)
                )
                results["failed"] += 1

        self.logger.info(
            "Bulk notification sending completed",
            **results
        )

        return results

    async def _send_message_with_retry(
            self,
            user_id: int,
            text: str,
            reply_markup: Optional[InlineKeyboardMarkup] = None,
            max_retries: int = 3
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        for attempt in range(max_retries):
            try:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                return True

            except TelegramForbiddenError:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                self.stats["blocked_users"].add(user_id)
                self.logger.warning(
                    "User blocked the bot",
                    user_id=user_id
                )
                return False

            except TelegramRetryAfter as e:
                # Rate limit –æ—Ç Telegram API
                retry_after = e.retry_after
                self.logger.warning(
                    "Telegram rate limit hit, waiting",
                    user_id=user_id,
                    retry_after=retry_after,
                    attempt=attempt + 1
                )

                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_after)
                    continue
                else:
                    return False

            except TelegramBadRequest as e:
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                self.logger.error(
                    "Bad request to Telegram API",
                    user_id=user_id,
                    error=str(e),
                    attempt=attempt + 1
                )

                # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
                return False

            except Exception as e:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                self.logger.error(
                    "Unexpected error sending message",
                    user_id=user_id,
                    error=str(e),
                    attempt=attempt + 1
                )

                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)  # Exponential backoff
                    continue
                else:
                    return False

        return False

    async def _check_rate_limit(
            self,
            user_id: int,
            priority: str = "MEDIUM"
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        """
        now = datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_message_counts:
            self.user_message_counts[user_id] = []

        user_timestamps = self.user_message_counts[user_id]

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
        hour_ago = now - timedelta(hours=1)
        user_timestamps[:] = [ts for ts in user_timestamps if ts > hour_ago]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        minute_ago = now - timedelta(minutes=1)
        recent_messages = sum(1 for ts in user_timestamps if ts > minute_ago)

        # –õ–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if priority == "HIGH":
            minute_limit = MAX_NOTIFICATIONS_PER_MINUTE * 2
            hour_limit = MAX_NOTIFICATIONS_PER_HOUR * 2
        elif priority == "LOW":
            minute_limit = MAX_NOTIFICATIONS_PER_MINUTE // 2
            hour_limit = MAX_NOTIFICATIONS_PER_HOUR // 2
        else:  # MEDIUM
            minute_limit = MAX_NOTIFICATIONS_PER_MINUTE
            hour_limit = MAX_NOTIFICATIONS_PER_HOUR

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if recent_messages >= minute_limit:
            self.logger.debug(
                "Minute rate limit exceeded",
                user_id=user_id,
                recent_messages=recent_messages,
                limit=minute_limit
            )
            return False

        if len(user_timestamps) >= hour_limit:
            self.logger.debug(
                "Hour rate limit exceeded",
                user_id=user_id,
                total_messages=len(user_timestamps),
                limit=hour_limit
            )
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        user_timestamps.append(now)
        return True

    async def _update_sending_stats(
            self,
            user_id: int,
            success: bool
    ) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success: –£—Å–ø–µ—à–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        """
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è
        today = datetime.now().date()
        if today != self.stats["last_reset"]:
            self.stats["sent_today"] = 0
            self.stats["last_reset"] = today

        if success:
            self.stats["sent_total"] += 1
            self.stats["sent_today"] += 1
        else:
            self.stats["failed_total"] += 1

    def get_sending_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏.

        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        return {
            "sent_total": self.stats["sent_total"],
            "sent_today": self.stats["sent_today"],
            "failed_total": self.stats["failed_total"],
            "blocked_users_count": len(self.stats["blocked_users"]),
            "success_rate": (
                                    self.stats["sent_total"] /
                                    max(1, self.stats["sent_total"] + self.stats["failed_total"])
                            ) * 100,
            "active_users_with_limits": len(self.user_message_counts)
        }

    def reset_user_rate_limits(self, user_id: int) -> None:
        """
        –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.user_message_counts:
            del self.user_message_counts[user_id]

        self.stats["blocked_users"].discard(user_id)

        self.logger.info(
            "Rate limits reset for user",
            user_id=user_id
        )

    def is_user_blocked(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        return user_id in self.stats["blocked_users"]