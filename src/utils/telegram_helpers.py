"""
–ü—É—Ç—å: src/utils/telegram_helpers.py
–û–ø–∏—Å–∞–Ω–∏–µ: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
–ê–≤—Ç–æ—Ä: Crypto Bot Team
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-07-30
"""

import re
from datetime import datetime
from typing import Optional
from aiogram.types import Message, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest
from utils.logger import get_logger

logger = get_logger(__name__)


async def safe_edit_message(
    message: Message,
    new_text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    force_unique: bool = True
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        new_text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        force_unique: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
    """
    try:
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ - –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
        if force_unique:
            timestamp = datetime.now().strftime("%H:%M:%S")
            if "<i>üïê" not in new_text:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è timestamp
                new_text += f"\n\n<i>üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
        
        await message.edit_text(new_text, reply_markup=reply_markup)
        return True
        
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.warning("Message content identical, skipping edit")
            return True
        elif "message to edit not found" in str(e):
            logger.warning("Message to edit not found")
            return False
        else:
            logger.error("Telegram Bad Request", error=str(e))
            return False
    except Exception as e:
        logger.error("Error editing message", error=str(e))
        return False


async def safe_send_message(
    bot,
    chat_id: int,
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None
) -> Optional[Message]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        
    Returns:
        Message –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        return await bot.send_message(chat_id, text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        logger.error("Failed to send message", chat_id=chat_id, error=str(e))
        return None
    except Exception as e:
        logger.error("Unexpected error sending message", chat_id=chat_id, error=str(e))
        return None
