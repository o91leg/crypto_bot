"""
–ü—É—Ç—å: scripts/test_websocket.py
–û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance
–ê–≤—Ç–æ—Ä: Crypto Bot Team
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-07-29
"""

import asyncio
import json
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent / "src"))

from services.websocket.binance_websocket import BinanceWebSocketClient
from config.binance_config import get_binance_config, get_websocket_url


class WebSocketTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""

    def __init__(self):
        self.message_count = 0
        self.error_count = 0
        self.test_duration = 30  # —Å–µ–∫—É–Ω–¥
        self.test_symbols = ["btcusdt", "ethusdt", "adausdt"]
        self.test_timeframes = ["1m", "5m"]

    async def message_handler(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.message_count += 1

        print(f"\nüì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'stream' in message:
            stream_name = message['stream']
            data = message.get('data', {})

            if 'k' in data:  # Kline/Candle data
                kline = data['k']
                symbol = kline.get('s', 'Unknown')
                interval = kline.get('i', 'Unknown')
                open_price = kline.get('o', '0')
                close_price = kline.get('c', '0')
                high_price = kline.get('h', '0')
                low_price = kline.get('l', '0')
                volume = kline.get('v', '0')
                is_closed = kline.get('x', False)

                print(f"üìä {symbol} ({interval}) - O:{open_price} H:{high_price} L:{low_price} C:{close_price}")
                print(f"   Volume: {volume}, Closed: {'‚úÖ' if is_closed else '‚ùå'}")

        elif 'id' in message:  # Response to subscription
            print(f"üîî –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {message}")

        elif 'error' in message:  # Error message
            self.error_count += 1
            print(f"‚ùå –û—à–∏–±–∫–∞: {message['error']}")

        else:
            print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {json.dumps(message, indent=2)}")

    async def error_handler(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        self.error_count += 1
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {error}")

    async def test_basic_connection(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

        client = BinanceWebSocketClient(
            message_handler=self.message_handler,
            error_handler=self.error_handler
        )

        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            print("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Binance WebSocket...")
            success = await client.connect()

            if not success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket")
                return False

            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
            await asyncio.sleep(2)

            if client.is_connected():
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
                return True
            else:
                print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
        finally:
            await client.disconnect()

    async def test_kline_subscription(self):
        """–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ."""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ...")

        client = BinanceWebSocketClient(
            message_handler=self.message_handler,
            error_handler=self.error_handler
        )

        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.connect()

            if not client.is_connected():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return False

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
            streams = []
            for symbol in self.test_symbols[:2]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞
                for timeframe in self.test_timeframes:
                    stream_name = f"{symbol}@kline_{timeframe}"
                    streams.append(stream_name)

            print(f"üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏: {streams}")
            success = await client.subscribe(streams)

            if not success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏")
                return False

            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞!")

            # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            print(f"üëÇ –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ {self.test_duration} —Å–µ–∫—É–Ω–¥...")

            start_time = asyncio.get_event_loop().time()
            timeout_time = start_time + self.test_duration

            while asyncio.get_event_loop().time() < timeout_time:
                await asyncio.sleep(1)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                elapsed = int(asyncio.get_event_loop().time() - start_time)
                if elapsed % 5 == 0 and elapsed > 0:
                    remaining = self.test_duration - elapsed
                    print(f"‚è±Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫—É–Ω–¥. –ü–æ–ª—É—á–µ–Ω–æ {self.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")

            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
            print(f"   üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_count}")
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {self.error_count}")
            print(f"   üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(client.subscribed_streams)}")

            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            print("üö´ –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø–æ—Ç–æ–∫–æ–≤...")
            await client.unsubscribe(streams)

            return self.message_count > 0 and self.error_count == 0

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
        finally:
            await client.disconnect()

    async def test_reconnection(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

        client = BinanceWebSocketClient(
            message_handler=self.message_handler,
            error_handler=self.error_handler
        )

        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.connect()

            if not client.is_connected():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return False

            print("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            print("üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            await client.websocket.close()

            # –ñ–¥–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            print("‚è±Ô∏è  –ñ–¥–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            await asyncio.sleep(10)

            if client.is_connected():
                print("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("‚ùå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
        finally:
            await client.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance")
    print("=" * 50)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_binance_config()
    print(f"üîó WebSocket URL: {get_websocket_url()}")
    print(f"üì° Ping –∏–Ω—Ç–µ—Ä–≤–∞–ª: {config.ping_interval}s")
    print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {config.max_reconnect_attempts}")
    print("=" * 50)

    tester = WebSocketTester()
    tests_passed = 0
    total_tests = 4

    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test1_result = await tester.test_basic_connection()
    if test1_result:
        tests_passed += 1
        print("‚úÖ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ü–†–û–ô–î–ï–ù")
    else:
        print("‚ùå –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ü–†–û–í–ê–õ–ï–ù")

    # –¢–µ—Å—Ç 2: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª)
    if test1_result:
        test2_result = await tester.test_kline_subscription()
        if test2_result:
            tests_passed += 1
            print("‚úÖ –¢–µ—Å—Ç 2: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ - –ü–†–û–ô–î–ï–ù")
        else:
            print("‚ùå –¢–µ—Å—Ç 2: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ - –ü–†–û–í–ê–õ–ï–ù")
    else:
        print("‚è≠Ô∏è  –¢–µ—Å—Ç 2: –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–≤–∞–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞")

    # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª)
    if test1_result:
        test3_result = await tester.test_reconnection()
        if test3_result:
            tests_passed += 1
            print("‚úÖ –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ü–†–û–ô–î–ï–ù")
        else:
            print("‚ùå –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –ü–†–û–í–ê–õ–ï–ù")
    else:
        print("‚è≠Ô∏è  –¢–µ—Å—Ç 3: –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–≤–∞–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞")

    # –¢–µ—Å—Ç 4: StreamManager (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª)
    if test1_result:
        test4_result = await tester.test_stream_manager()
        if test4_result:
            tests_passed += 1
            print("‚úÖ –¢–µ—Å—Ç 4: StreamManager - –ü–†–û–ô–î–ï–ù")
        else:
            print("‚ùå –¢–µ—Å—Ç 4: StreamManager - –ü–†–û–í–ê–õ–ï–ù")
    else:
        print("‚è≠Ô∏è  –¢–µ—Å—Ç 4: –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–≤–∞–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞")

    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    print(f"üì® –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {tester.message_count}")
    print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {tester.error_count}")

    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    elif tests_passed > 0:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return 1
    else:
        print("üí• –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return 2


async def test_stream_manager(self):
    """–¢–µ—Å—Ç StreamManager."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º StreamManager...")

    try:
        from services.websocket.stream_manager import StreamManager

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ç–æ–∫–æ–≤
        manager = StreamManager(data_processor=self.message_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await manager.start()

        if not manager.is_running():
            print("‚ùå StreamManager –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        print("‚úÖ StreamManager –∑–∞–ø—É—â–µ–Ω")

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = 12345
        symbol = "BTCUSDT"
        timeframes = ["1m", "5m"]

        print(f"üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {symbol} ({timeframes})")

        results = await manager.subscribe_user_to_pair(user_id, symbol, timeframes)

        if not all(results.values()):
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {results}")
            return False

        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω")

        # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        print("üëÇ –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è 15 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(15)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await manager.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_messages_processed']} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await manager.remove_user_completely(user_id)
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–Ω")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await manager.stop()
        print("‚úÖ StreamManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        return stats['total_messages_processed'] > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ StreamManager: {e}")
        return False


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)